"""
Prompt templates with few-shot examples for YouTube analytics AI assistant.
Supports both English and Bengali with reusable template system.
"""

import os
from typing import Dict, List, Optional
from dataclasses import dataclass

@dataclass
class FewShotExample:
    """Structure for few-shot examples."""
    question: str
    answer: str
    context: Optional[str] = None

class PromptTemplateManager:
    """
    Manages prompt templates with few-shot examples for YouTube analytics.
    Supports both English and Bengali with contextual examples.
    """
    
    def __init__(self):
        self.templates = {
            'en': self._load_english_templates(),
            'bn': self._load_bengali_templates()
        }
    
    def _load_english_templates(self) -> Dict[str, List[FewShotExample]]:
        """Load English few-shot examples organized by category."""
        return {
            'ctr_analysis': [
                FewShotExample(
                    question="Which videos had the lowest CTR?",
                    answer="Your lowest CTR videos are:\n1. 'Cooking Tutorial Part 3' (0.8%) - 45K impressions\n2. 'Daily Vlog #127' (1.2%) - 32K impressions\n3. 'Tech Review: Budget Phone' (1.4%) - 28K impressions\n\nThese underperformed compared to your 3.2% average CTR. Consider updating thumbnails with brighter colors and clearer text.",
                    context="Low CTR indicates thumbnail/title issues"
                ),
                FewShotExample(
                    question="Why did my CTR drop last week?",
                    answer="Your CTR dropped from 4.1% to 2.8% last week. Analysis shows:\n\nтАв 3 videos used similar thumbnail styles (red background)\nтАв Upload timing shifted to 6 PM instead of usual 8 PM\nтАв Competition increased in your niche (5 similar videos published)\n\nRecommendation: Test different thumbnail styles and return to 8 PM uploads for better performance.",
                    context="CTR drops need multi-factor analysis"
                )
            ],
            
            'title_optimization': [
                FewShotExample(
                    question="Suggest better titles for my low-performing videos",
                    answer="Here are optimized title suggestions:\n\n**Current:** 'Cooking Rice'\n**Suggested:** 'Perfect Rice Every Time - 3 Secret Tips!' (adds urgency + benefit)\n\n**Current:** 'Phone Review'\n**Suggested:** 'This $200 Phone SHOCKED Me - Better Than iPhone?' (creates curiosity + comparison)\n\n**Current:** 'Travel Vlog'\n**Suggested:** 'I Spent 24 Hours in Bangladesh's Hidden Paradise' (specific + intriguing)\n\nFocus on emotional triggers, numbers, and clear benefits.",
                    context="Title optimization for engagement"
                ),
                FewShotExample(
                    question="What makes a good YouTube title?",
                    answer="Based on your top-performing videos, effective titles include:\n\nтЬЕ **Numbers:** '5 Ways to...' (performs 40% better)\nтЬЕ **Questions:** 'Why Does...' (increases curiosity)\nтЬЕ **Emotional words:** 'Amazing', 'Shocking', 'Secret'\nтЬЕ **Clear benefit:** What viewer will learn/gain\nтЬЕ **Urgency:** 'Before It's Too Late', 'Right Now'\n\nYour best title: 'I Tried 7 Street Foods in Dhaka - #3 Will Shock You!' (847K views, 6.2% CTR)",
                    context="Title best practices from data"
                )
            ],
            
            'performance_trends': [
                FewShotExample(
                    question="What trends do you see in my video performance?",
                    answer="Key performance trends over the last 30 days:\n\nЁЯУИ **Improving:**\nтАв Average view duration: +15% (now 2:34 minutes)\nтАв Subscriber conversion: +22% (3.4% of viewers subscribe)\nтАв Weekend uploads perform 30% better\n\nЁЯУЙ **Declining:**\nтАв CTR dropped 8% (from 4.2% to 3.9%)\nтАв Views from Bangladesh decreased 12%\n\nЁЯОп **Opportunities:**\nтАв Food content gets 2x more engagement\nтАв Videos 8-12 minutes long perform best\nтАв Thursday uploads have highest reach",
                    context="Comprehensive trend analysis"
                ),
                FewShotExample(
                    question="How is my channel growing compared to last month?",
                    answer="Channel growth comparison (This month vs Last month):\n\n**ЁЯУК Overall Performance:**\nтАв Total views: 1.2M (+18%) тмЖя╕П\nтАв Average CTR: 3.9% (-0.3%) тмЗя╕П\nтАв Watch time: 45K hours (+25%) тмЖя╕П\n\n**ЁЯОп Top Improvements:**\nтАв 'Street Food Series' gained 340K views (+89%)\nтАв Comment engagement up 45%\nтАв Shares increased by 67%\n\n**тЪая╕П Areas to Focus:**\nтАв 3 videos underperformed (below 10K views)\nтАв CTR needs attention - test new thumbnail styles\nтАв Upload consistency: only 12 videos vs target 16",
                    context="Month-over-month growth analysis"
                )
            ],
            
            'audience_insights': [
                FewShotExample(
                    question="Tell me about my audience demographics",
                    answer="Your audience analysis:\n\n**ЁЯМН Geographic Distribution:**\nтАв Bangladesh: 68% (primary audience)\nтАв India: 15% (growing segment)\nтАв USA: 8% (high engagement)\nтАв UK: 5%, Others: 4%\n\n**ЁЯУ▒ Device Usage:**\nтАв Mobile: 82% (optimize for mobile viewing)\nтАв Desktop: 15%, TV: 3%\n\n**тП░ Peak Activity:**\nтАв Best upload time: 8-9 PM Bangladesh time\nтАв Highest engagement: Friday-Sunday\nтАв Average session: 12 minutes",
                    context="Audience demographic insights"
                )
            ]
        }
    
    def _load_bengali_templates(self) -> Dict[str, List[FewShotExample]]:
        """Load Bengali few-shot examples organized by category."""
        return {
            'ctr_analysis': [
                FewShotExample(
                    question="ржХрзЛржи ржнрж┐ржбрж┐ржУржЧрзБрж▓рзЛрж░ CTR рж╕ржмржЪрзЗржпрж╝рзЗ ржХржо?",
                    answer="ржЖржкржирж╛рж░ рж╕ржмржЪрзЗржпрж╝рзЗ ржХржо CTR ржПрж░ ржнрж┐ржбрж┐ржУржЧрзБрж▓рзЛ:\nрзз. 'рж░рж╛ржирзНржирж╛рж░ ржЯрж┐ржЙржЯрзЛрж░рж┐ржпрж╝рж╛рж▓ ржкрж╛рж░рзНржЯ рзй' (рзж.рзо%) - рзкрзлрж╣рж╛ржЬрж╛рж░ ржЗржоржкрзНрж░рзЗрж╢ржи\nрзи. 'ржжрзИржиржирзНржжрж┐ржи ржнрзНрж▓ржЧ #рззрзирзн' (рзз.рзи%) - рзйрзирж╣рж╛ржЬрж╛рж░ ржЗржоржкрзНрж░рзЗрж╢ржи\nрзй. 'ржЯрзЗржХ рж░рж┐ржнрж┐ржЙ: ржмрж╛ржЬрзЗржЯ ржлрзЛржи' (рзз.рзк%) - рзирзорж╣рж╛ржЬрж╛рж░ ржЗржоржкрзНрж░рзЗрж╢ржи\n\nржПржЧрзБрж▓рзЛ ржЖржкржирж╛рж░ ржЧржбрж╝ рзй.рзи% CTR ржерзЗржХрзЗ ржХржо ржкрж╛рж░ржлрж░рзНржо ржХрж░рзЗржЫрзЗред ржЙржЬрзНржЬрзНржмрж▓ рж░ржЩ ржПржмржВ рж╕рзНржкрж╖рзНржЯ ржЯрзЗржХрзНрж╕ржЯ ржжрж┐ржпрж╝рзЗ ржерж╛ржорзНржмржирзЗржЗрж▓ ржЖржкржбрзЗржЯ ржХрж░рж╛рж░ ржХржерж╛ ржнрж╛ржмрзБржиред",
                    context="ржХржо CTR ржерж╛ржорзНржмржирзЗржЗрж▓/ржЯрж╛ржЗржЯрзЗрж▓ рж╕ржорж╕рзНржпрж╛ ржирж┐рж░рзНржжрзЗрж╢ ржХрж░рзЗ"
                ),
                FewShotExample(
                    question="ржЧржд рж╕ржкрзНрждрж╛рж╣рзЗ ржЖржорж╛рж░ CTR ржХрзЗржи ржХржорзЗржЫрзЗ?",
                    answer="ржЧржд рж╕ржкрзНрждрж╛рж╣рзЗ ржЖржкржирж╛рж░ CTR рзк.рзз% ржерзЗржХрзЗ рзи.рзо% ржП ржирзЗржорзЗржЫрзЗред ржмрж┐рж╢рзНрж▓рзЗрж╖ржгрзЗ ржжрзЗржЦрж╛ ржпрж╛ржЪрзНржЫрзЗ:\n\nтАв рзйржЯрж┐ ржнрж┐ржбрж┐ржУрждрзЗ ржПржХржЗ ржзрж░ржирзЗрж░ ржерж╛ржорзНржмржирзЗржЗрж▓ рж╕рзНржЯрж╛ржЗрж▓ (рж▓рж╛рж▓ ржмрзНржпрж╛ржХржЧрзНрж░рж╛ржЙржирзНржб)\nтАв ржЖржкрж▓рзЛржб рж╕ржоржпрж╝ рж╕рзНржмрж╛ржнрж╛ржмрж┐ржХ рзоржЯрж╛рж░ ржмржжрж▓рзЗ рзмржЯрж╛ржпрж╝ ржкрж░рж┐ржмрж░рзНрждржи\nтАв ржЖржкржирж╛рж░ ржирж┐рж╢рзЗ ржкрзНрж░рждрж┐ржпрзЛржЧрж┐рждрж╛ ржмрзЗржбрж╝рзЗржЫрзЗ (рзлржЯрж┐ ржЕржирзБрж░рзВржк ржнрж┐ржбрж┐ржУ ржкрзНрж░ржХрж╛рж╢рж┐ржд)\n\nрж╕рзБржкрж╛рж░рж┐рж╢: ржмрж┐ржнрж┐ржирзНржи ржерж╛ржорзНржмржирзЗржЗрж▓ рж╕рзНржЯрж╛ржЗрж▓ ржкрж░рзАржХрзНрж╖рж╛ ржХрж░рзБржи ржПржмржВ ржнрж╛рж▓ ржкрж╛рж░ржлрж░ржорзЗржирзНрж╕рзЗрж░ ржЬржирзНржп рзоржЯрж╛ ржЖржкрж▓рзЛржбрзЗ ржлрж┐рж░рзЗ ржпрж╛ржиред",
                    context="CTR рж╣рзНрж░рж╛рж╕рзЗрж░ ржмрж╣рзБржорзБржЦрзА ржмрж┐рж╢рзНрж▓рзЗрж╖ржг ржкрзНрж░ржпрж╝рзЛржЬржи"
                )
            ],
            
            'title_optimization': [
                FewShotExample(
                    question="ржЖржорж╛рж░ ржХржо ржкрж╛рж░ржлрж░ржорж┐ржВ ржнрж┐ржбрж┐ржУрж░ ржЬржирзНржп ржнрж╛рж▓ ржЯрж╛ржЗржЯрзЗрж▓ рж╕рж╛ржЬрзЗрж╕рзНржЯ ржХрж░рзБржи",
                    answer="ржЕржкрзНржЯрж┐ржорж╛ржЗржЬржб ржЯрж╛ржЗржЯрзЗрж▓ рж╕рж╛ржЬрзЗрж╢ржи:\n\n**ржмрж░рзНрждржорж╛ржи:** 'ржнрж╛ржд рж░рж╛ржирзНржирж╛'\n**рж╕рж╛ржЬрзЗрж╕рзНржЯрзЗржб:** 'ржкрзНрж░рждрж┐ржмрж╛рж░ ржкрж╛рж░ржлрзЗржХрзНржЯ ржнрж╛ржд - рзйржЯрж┐ ржЧрзЛржкржи ржЯрж┐ржкрж╕!' (ржЬрж░рзБрж░рж┐ + рж╕рзБржмрж┐ржзрж╛ ржпрзЛржЧ ржХрж░рзЗ)\n\n**ржмрж░рзНрждржорж╛ржи:** 'ржлрзЛржи рж░рж┐ржнрж┐ржЙ'\n**рж╕рж╛ржЬрзЗрж╕рзНржЯрзЗржб:** 'ржПржЗ рзирзжрзж ржЯрж╛ржХрж╛рж░ ржлрзЛржи ржЖржорж╛ржХрзЗ ржЪржоржХрзЗ ржжрж┐рж▓ - ржЖржЗржлрзЛржирзЗрж░ ржЪрзЗржпрж╝рзЗ ржнрж╛рж▓?' (ржХрзМрждрзВрж╣рж▓ + рждрзБрж▓ржирж╛)\n\n**ржмрж░рзНрждржорж╛ржи:** 'ржЯрзНрж░рж╛ржнрзЗрж▓ ржнрзНрж▓ржЧ'\n**рж╕рж╛ржЬрзЗрж╕рзНржЯрзЗржб:** 'ржмрж╛ржВрж▓рж╛ржжрзЗрж╢рзЗрж░ рж▓рзБржХрж╛ржирзЛ рж╕рзНржмрж░рзНржЧрзЗ рзирзк ржШржирзНржЯрж╛ ржХрж╛ржЯрж╛рж▓рж╛ржо' (ржирж┐рж░рзНржжрж┐рж╖рзНржЯ + ржЖржХрж░рзНрж╖ржгрзАржпрж╝)\n\nржЖржмрзЗржЧржоржпрж╝ ржЯрзНрж░рж┐ржЧрж╛рж░, рж╕ржВржЦрзНржпрж╛ ржПржмржВ рж╕рзНржкрж╖рзНржЯ рж╕рзБржмрж┐ржзрж╛рж░ ржЙржкрж░ ржлрзЛржХрж╛рж╕ ржХрж░рзБржиред",
                    context="ржПржиржЧрзЗржЬржорзЗржирзНржЯрзЗрж░ ржЬржирзНржп ржЯрж╛ржЗржЯрзЗрж▓ ржЕржкрзНржЯрж┐ржорж╛ржЗржЬрзЗрж╢ржи"
                )
            ],
            
            'performance_trends': [
                FewShotExample(
                    question="ржЖржорж╛рж░ ржнрж┐ржбрж┐ржУ ржкрж╛рж░ржлрж░ржорзЗржирзНрж╕рзЗ ржХрзА ржЯрзНрж░рзЗржирзНржб ржжрзЗржЦржЫрзЗржи?",
                    answer="ржЧржд рзйрзж ржжрж┐ржирзЗрж░ ржорзВрж▓ ржкрж╛рж░ржлрж░ржорзЗржирзНрж╕ ржЯрзНрж░рзЗржирзНржб:\n\nЁЯУИ **ржЙржирзНржирждрж┐:**\nтАв ржЧржбрж╝ ржжрзЗржЦрж╛рж░ рж╕ржоржпрж╝: +рззрзл% (ржПржЦржи рзи:рзйрзк ржорж┐ржирж┐ржЯ)\nтАв рж╕рж╛ржмрж╕рзНржХрзНрж░рж╛ржЗржмрж╛рж░ рж░рзВржкрж╛ржирзНрждрж░: +рзирзи% (рзй.рзк% ржжрж░рзНрж╢ржХ рж╕рж╛ржмрж╕рзНржХрзНрж░рж╛ржЗржм ржХрж░рзЗ)\nтАв рж╕ржкрзНрждрж╛рж╣рж╛ржирзНрждрзЗрж░ ржЖржкрж▓рзЛржб рзйрзж% ржнрж╛рж▓ ржкрж╛рж░ржлрж░рзНржо ржХрж░рзЗ\n\nЁЯУЙ **рж╣рзНрж░рж╛рж╕:**\nтАв CTR рзо% ржХржорзЗржЫрзЗ (рзк.рзи% ржерзЗржХрзЗ рзй.рзп%)\nтАв ржмрж╛ржВрж▓рж╛ржжрзЗрж╢ ржерзЗржХрзЗ ржнрж┐ржЙ рззрзи% ржХржорзЗржЫрзЗ\n\nЁЯОп **рж╕рзБржпрзЛржЧ:**\nтАв ржЦрж╛ржмрж╛рж░рзЗрж░ ржХржирзНржЯрзЗржирзНржЯ рзиржЧрзБржг ржмрзЗрж╢рж┐ ржПржиржЧрзЗржЬржорзЗржирзНржЯ ржкрж╛ржпрж╝\nтАв рзо-рззрзи ржорж┐ржирж┐ржЯрзЗрж░ ржнрж┐ржбрж┐ржУ рж╕ржмржЪрзЗржпрж╝рзЗ ржнрж╛рж▓ ржкрж╛рж░ржлрж░рзНржо ржХрж░рзЗ\nтАв ржмрзГрж╣рж╕рзНржкрждрж┐ржмрж╛рж░ ржЖржкрж▓рзЛржбрзЗ рж╕рж░рзНржмрзЛржЪрзНржЪ рж░рж┐ржЪ",
                    context="ржмрзНржпрж╛ржкржХ ржЯрзНрж░рзЗржирзНржб ржмрж┐рж╢рзНрж▓рзЗрж╖ржг"
                )
            ]
        }
    
    def get_system_prompt(self, language: str = 'en', category: str = 'general', 
                         user_question: str = "", data_summary: str = "") -> str:
        """
        Generate a system prompt with few-shot examples.
        
        Args:
            language (str): 'en' or 'bn'
            category (str): Category of examples to include
            user_question (str): The actual user question
            data_summary (str): Summary of the CSV data
            
        Returns:
            str: Complete system prompt with examples
        """
        # Base system prompts
        base_prompts = {
            'en': """You are a YouTube analytics expert and data analyst. Your role is to analyze YouTube channel performance data and provide actionable insights to content creators.

ANALYSIS GUIDELINES:
- Focus on data-driven insights using specific numbers and metrics
- Identify trends, patterns, and correlations in the data
- Provide actionable recommendations for improving channel performance
- Compare performance across different videos and time periods
- Explain what the metrics mean in practical terms for content creators

RESPONSE STYLE:
- Be clear, concise, and professional
- Use bullet points and structured formatting when helpful
- Highlight key findings and most important recommendations
- Explain technical metrics in accessible language
- Focus on practical next steps the creator can take""",
            
            'bn': """ржЖржкржирж┐ ржПржХржЬржи YouTube ржЕрзНржпрж╛ржирж╛рж▓рж┐ржЯрж┐ржХрзНрж╕ ржмрж┐рж╢рзЗрж╖ржЬрзНржЮ ржПржмржВ ржбрзЗржЯрж╛ ржмрж┐рж╢рзНрж▓рзЗрж╖ржХред ржЖржкржирж╛рж░ ржнрзВржорж┐ржХрж╛ рж╣рж▓ YouTube ржЪрзНржпрж╛ржирзЗрж▓рзЗрж░ ржкрж╛рж░ржлрж░ржорзЗржирзНрж╕ ржбрзЗржЯрж╛ ржмрж┐рж╢рзНрж▓рзЗрж╖ржг ржХрж░рж╛ ржПржмржВ ржХржирзНржЯрзЗржирзНржЯ ржХрзНрж░рж┐ржпрж╝рзЗржЯрж░ржжрзЗрж░ ржХрж╛рж░рзНржпржХрж░ ржкрж░рж╛ржорж░рзНрж╢ ржкрзНрж░ржжрж╛ржи ржХрж░рж╛ред

ржмрж┐рж╢рзНрж▓рзЗрж╖ржгрзЗрж░ ржирж┐рж░рзНржжрзЗрж╢ржирж╛:
- ржирж┐рж░рзНржжрж┐рж╖рзНржЯ рж╕ржВржЦрзНржпрж╛ ржПржмржВ ржорзЗржЯрзНрж░рж┐ржХрзНрж╕ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗ ржбрзЗржЯрж╛-ржЪрж╛рж▓рж┐ржд ржЕржирзНрждрж░рзНржжрзГрж╖рзНржЯрж┐рждрзЗ ржлрзЛржХрж╛рж╕ ржХрж░рзБржи
- ржбрзЗржЯрж╛ржпрж╝ ржЯрзНрж░рзЗржирзНржб, ржкрзНржпрж╛ржЯрж╛рж░рзНржи ржПржмржВ рж╕ржорзНржкрж░рзНржХ ржЪрж┐рж╣рзНржирж┐ржд ржХрж░рзБржи
- ржЪрзНржпрж╛ржирзЗрж▓рзЗрж░ ржкрж╛рж░ржлрж░ржорзЗржирзНрж╕ ржЙржирзНржирждрж┐рж░ ржЬржирзНржп ржХрж╛рж░рзНржпржХрж░ рж╕рзБржкрж╛рж░рж┐рж╢ ржкрзНрж░ржжрж╛ржи ржХрж░рзБржи
- ржмрж┐ржнрж┐ржирзНржи ржнрж┐ржбрж┐ржУ ржПржмржВ рж╕ржоржпрж╝ржХрж╛рж▓рзЗрж░ ржоржзрзНржпрзЗ ржкрж╛рж░ржлрж░ржорзЗржирзНрж╕ рждрзБрж▓ржирж╛ ржХрж░рзБржи
- ржХржирзНржЯрзЗржирзНржЯ ржХрзНрж░рж┐ржпрж╝рзЗржЯрж░ржжрзЗрж░ ржЬржирзНржп ржорзЗржЯрзНрж░рж┐ржХрзНрж╕рзЗрж░ ржмрзНржпржмрж╣рж╛рж░рж┐ржХ ржЕрж░рзНрже ржмрзНржпрж╛ржЦрзНржпрж╛ ржХрж░рзБржи

ржЙрждрзНрждрж░рзЗрж░ ржзрж░ржи:
- рж╕рзНржкрж╖рзНржЯ, рж╕ржВржХрзНрж╖рж┐ржкрзНржд ржПржмржВ ржкрзЗрж╢рж╛ржжрж╛рж░ рж╣ржи
- рж╕рж╣рж╛ржпрж╝ржХ рж╣рж▓рзЗ ржмрзБрж▓рзЗржЯ ржкржпрж╝рзЗржирзНржЯ ржПржмржВ ржХрж╛ржарж╛ржорзЛржЧржд ржлрж░ржорзНржпрж╛ржЯрж┐ржВ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржи
- ржорзВрж▓ ржлрж▓рж╛ржлрж▓ ржПржмржВ рж╕ржмржЪрзЗржпрж╝рзЗ ржЧрзБрж░рзБрждрзНржмржкрзВрж░рзНржг рж╕рзБржкрж╛рж░рж┐рж╢ржЧрзБрж▓рж┐ рж╣рж╛ржЗрж▓рж╛ржЗржЯ ржХрж░рзБржи
- ржкрзНрж░ржпрзБржХрзНрждрж┐ржЧржд ржорзЗржЯрзНрж░рж┐ржХрзНрж╕ рж╕рж╣ржЬ ржнрж╛рж╖рж╛ржпрж╝ ржмрзНржпрж╛ржЦрзНржпрж╛ ржХрж░рзБржи
- ржХрзНрж░рж┐ржпрж╝рзЗржЯрж░ ржпрзЗ ржмрзНржпржмрж╣рж╛рж░рж┐ржХ ржкржжржХрзНрж╖рзЗржк ржирж┐рждрзЗ ржкрж╛рж░рзЗржи рждрж╛рж░ ржЙржкрж░ ржлрзЛржХрж╛рж╕ ржХрж░рзБржи"""
        }
        
        # Start with base prompt
        prompt = base_prompts.get(language, base_prompts['en'])
        
        # Add data summary if provided
        if data_summary:
            prompt += f"\n\nDATA OVERVIEW:\n{data_summary}"
        
        # Add few-shot examples if category exists
        if category in self.templates.get(language, {}):
            examples = self.templates[language][category]
            
            prompt += f"\n\nEXAMPLES:\n"
            prompt += "=" * 40 + "\n"
            
            for i, example in enumerate(examples, 1):
                prompt += f"\nExample {i}:\n"
                prompt += f"Q: {example.question}\n"
                prompt += f"A: {example.answer}\n"
                if example.context:
                    prompt += f"Context: {example.context}\n"
                prompt += "-" * 30 + "\n"
        
        # Add the actual user question
        if user_question:
            prompt += f"\nNow answer this question using the same style and depth:\nQ: {user_question}\nA: "
        
        return prompt
    
    def get_category_from_question(self, question: str, language: str = 'en') -> str:
        """
        Determine the most appropriate category based on the user's question.
        
        Args:
            question (str): User's question
            language (str): Language code
            
        Returns:
            str: Category name or 'general' if no match
        """
        question_lower = question.lower()
        
        # English keywords
        if language == 'en':
            if any(keyword in question_lower for keyword in ['ctr', 'click', 'thumbnail', 'drop', 'low']):
                return 'ctr_analysis'
            elif any(keyword in question_lower for keyword in ['title', 'suggest', 'name', 'headline']):
                return 'title_optimization'
            elif any(keyword in question_lower for keyword in ['trend', 'performance', 'growth', 'compare', 'change']):
                return 'performance_trends'
            elif any(keyword in question_lower for keyword in ['audience', 'demographic', 'country', 'viewer']):
                return 'audience_insights'
        
        # Bengali keywords
        elif language == 'bn':
            if any(keyword in question_lower for keyword in ['ctr', 'ржХрзНрж▓рж┐ржХ', 'ржерж╛ржорзНржмржирзЗржЗрж▓', 'ржХржо', 'рж╣рзНрж░рж╛рж╕']):
                return 'ctr_analysis'
            elif any(keyword in question_lower for keyword in ['ржЯрж╛ржЗржЯрзЗрж▓', 'рж╢рж┐рж░рзЛржирж╛ржо', 'ржирж╛ржо', 'рж╕рж╛ржЬрзЗрж╕рзНржЯ']):
                return 'title_optimization'
            elif any(keyword in question_lower for keyword in ['ржЯрзНрж░рзЗржирзНржб', 'ржкрж╛рж░ржлрж░ржорзЗржирзНрж╕', 'ржмрзГржжрзНржзрж┐', 'рждрзБрж▓ржирж╛', 'ржкрж░рж┐ржмрж░рзНрждржи']):
                return 'performance_trends'
            elif any(keyword in question_lower for keyword in ['ржжрж░рзНрж╢ржХ', 'ржЕржбрж┐ржпрж╝рзЗржирзНрж╕', 'ржжрзЗрж╢', 'ржнрж┐ржЙржпрж╝рж╛рж░']):
                return 'audience_insights'
        
        return 'general'
    
    def get_contextual_prompt(self, user_question: str, language: str = 'en', 
                            data_summary: str = "") -> str:
        """
        Generate a contextual prompt with appropriate few-shot examples.
        
        Args:
            user_question (str): User's question
            language (str): Language code ('en' or 'bn')
            data_summary (str): Summary of the data
            
        Returns:
            str: Complete contextual prompt
        """
        category = self.get_category_from_question(user_question, language)
        return self.get_system_prompt(language, category, user_question, data_summary)

# Global instance for easy import
prompt_manager = PromptTemplateManager()

def get_contextual_prompt(user_question: str, language: str = 'en', data_summary: str = "") -> str:
    """
    Convenience function to get a contextual prompt.
    
    Args:
        user_question (str): User's question
        language (str): Language code
        data_summary (str): Data summary
        
    Returns:
        str: Contextual prompt with examples
    """
    return prompt_manager.get_contextual_prompt(user_question, language, data_summary)

# Example usage and testing
if __name__ == "__main__":
    # Test English prompts
    print("=== ENGLISH CTR ANALYSIS EXAMPLE ===")
    prompt = get_contextual_prompt(
        "Why is my CTR so low?", 
        language='en',
        data_summary="Channel has 50 videos, average CTR 2.1%, total views 500K"
    )
    print(prompt[:500] + "...\n")
    
    # Test Bengali prompts
    print("=== BENGALI TITLE OPTIMIZATION EXAMPLE ===")
    prompt = get_contextual_prompt(
        "ржЖржорж╛рж░ ржнрж┐ржбрж┐ржУрж░ ржЯрж╛ржЗржЯрзЗрж▓ ржХрж┐ржнрж╛ржмрзЗ ржнрж╛рж▓ ржХрж░ржм?",
        language='bn',
        data_summary="ржЪрзНржпрж╛ржирзЗрж▓рзЗ рзлрзжржЯрж┐ ржнрж┐ржбрж┐ржУ, ржЧржбрж╝ CTR рзи.рзз%, ржорзЛржЯ ржнрж┐ржЙ рзлрзжрзжрж╣рж╛ржЬрж╛рж░"
    )
    print(prompt[:500] + "...\n")
    
    # Test category detection
    print("=== CATEGORY DETECTION TESTS ===")
    test_questions = [
        ("How can I improve my CTR?", "en"),
        ("Suggest better titles", "en"),
        ("What trends do you see?", "en"),
        ("ржЖржорж╛рж░ CTR ржХрзЗржи ржХржо?", "bn"),
        ("ржнрж╛рж▓ ржЯрж╛ржЗржЯрзЗрж▓ рж╕рж╛ржЬрзЗрж╕рзНржЯ ржХрж░рзБржи", "bn")
    ]
    
    for question, lang in test_questions:
        category = prompt_manager.get_category_from_question(question, lang)
        print(f"'{question}' ({lang}) тЖТ {category}")